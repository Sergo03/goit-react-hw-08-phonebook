{"version":3,"sources":["Components/Form/Style.module.css","Components/Render/Style.module.css","redux/Contacts/contacts-selectors.js","Components/Form/Form.js","redux/Contacts/operations.js","Components/Filter/Filter.js","Components/Render/RenderContactList.js","Components/View/Contacts.js"],"names":["module","exports","getIsLoadingContacts","state","contacts","loading","getFilter","filter","getError","error","getItems","items","getVisibalContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Form","number","handleinput","e","setState","currentTarget","value","handleSubmit","preventDefault","isIncludeName","props","find","alert","onSubmit","reset","this","className","style","label_name","input_name","type","pattern","title","required","onChange","label_number","Button","variant","input_btn","Component","connect","selectors","dispatch","data","action","axios","post","then","catch","message","operations","actions","onDeleteContact","id","delete","list_render","map","contact_item","btn_del","onClick","Contacts","fetchContacts","isLoadingContacts","submitForm","get"],"mappings":"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","file":"static/js/3.09698085.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label_number\":\"Style_label_number__27WSD\",\"input_btn\":\"Style_input_btn__2_3Vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_render\":\"Style_list_render__2VcB4\",\"contact_item\":\"Style_contact_item__3RUZ0\"};","import { createSelector} from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoadingContacts = state => state.contacts.loading;\r\nexport const getFilter =state=>state.contacts.filter\r\nexport const getError = state => state.contacts.error\r\nexport const getItems = state => state.contacts.items;\r\n\r\n\r\nexport const getVisibalContacts = createSelector(\r\n    [getItems, getFilter],\r\n    (items, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return items.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter))\r\n    }\r\n)","import React, { Component } from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport {connect} from 'react-redux'\r\nimport * as operations from '../../redux/Contacts/operations'\r\nimport * as selectors from '../../redux/Contacts/contacts-selectors'\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport style from './Style.module.css'\r\n\r\n\r\n\r\n\r\nclass Form extends Component{\r\n  state = {\r\n    name: '',\r\n    number: ''\r\n  }\r\n    \r\n  handleinput = (e) => {\r\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value })\r\n  };\r\n      \r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isIncludeName = !!this.props.value.find(contact => contact.name === this.state.name)\r\n    isIncludeName && alert(`${this.state.name} is already in contacts`)\r\n    !isIncludeName && this.props.onSubmit(this.state)\r\n \r\n    \r\n    this.reset();\r\n  }\r\n  \r\n  \r\n  reset = () => {\r\n    this.setState({ name: '', number: '' })\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit={this.handleSubmit} className='from_contact'>\r\n        \r\n        <label className={style.label_name}> Name\r\n          <input\r\n            className={style.input_name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleinput}\r\n            value={this.state.name}\r\n          />\r\n        </label> \r\n        <label className={style.label_number}>Number\r\n          <input\r\n            className='input_tel'\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleinput}\r\n            value={this.state.number}\r\n          />\r\n        </label>\r\n         \r\n        <Button type=\"submit\" variant=\"success\" className={style.input_btn}>Add contact</Button>\r\n      </form>\r\n      \r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropsTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: selectors.getItems(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (data) => dispatch(operations.addContact(data)),\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import axios from 'axios'\r\nimport * as action from './action'\r\n\r\n\r\n\r\nexport const fetchContact = () => dispatch => {\r\n    dispatch(action.fetchContactRequest());\r\n    axios.get('/contacts').then(({ data }) => dispatch(action.fetchContactSuccsess(data)))\r\n        .catch(error => dispatch(action.fetchContactError(error.message)));\r\n};\r\n\r\nexport const addContact = ({ name, number }) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number\r\n    };\r\n    dispatch(action.addContactRequest());\r\n    axios.post('/contacts', contact).then(({ data }) => dispatch(action.addContactSuccsess(data)),\r\n    ).catch(error => dispatch(action.addContactError(error.message)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(action.deleteContactRequest())\r\n    \r\n    axios.delete(`/contacts/${id}`).then(() => dispatch(action.deleteContactSuccsess(id)))\r\n        .catch(error => dispatch(action.deleteContactError(error.message)));\r\n};","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../redux/Contacts/action'\r\nimport * as selectors from '../../redux/Contacts/contacts-selectors'\r\n\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className='label}'> Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} className='input' />\r\n    </label>\r\n            \r\n  )\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropsTypes.func.isRequired\r\n}\r\n    \r\nconst mapStateToProps = state => ({\r\n  value: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange:(e)=>dispatch(actions.changeFilter(e.currentTarget.value))\r\n})\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport * as operations from '../../redux/Contacts/operations'\r\nimport style from './Style.module.css'\r\nimport * as selectors from '../../redux/Contacts/contacts-selectors'\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Render = ({ value, onDeleteContact }) => {\r\n\r\n    return (\r\n         <ul className={style.list_render}>\r\n        {value.map((contact) => {\r\n            return <li className={style.contact_item} key={contact.id}>{contact.name}: {contact.number} <Button type='button' className={style.btn_del} onClick={()=>onDeleteContact(contact.id) }variant=\"danger\">delete</Button></li>\r\n          })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nRender.propTypes = {\r\n  value: PropsTypes.array.isRequired,\r\n  onDeleteContact:PropsTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n   value:selectors.getVisibalContacts(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact:(id)=>dispatch(operations.deleteContact(id))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Render);","import React, { Component } from 'react';\r\nimport Form from '../Form/Form';\r\nimport Filter from '../Filter/Filter';\r\nimport Render from '../Render/RenderContactList';\r\nimport { connect } from 'react-redux'\r\nimport * as operations from '../../redux/Contacts/operations'\r\nimport * as selectors from '../../redux/Contacts/contacts-selectors';\r\n\r\n\r\nclass Contacts extends Component{\r\n  \r\n  \r\n  componentDidMount() {\r\n    this.props.fetchContacts()\r\n}\r\n    render() {\r\n        return (\r\n            <div className='contact'>\r\n                {this.props.error && <h1>{this.props.error}</h1>}\r\n                {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n                <h1 className='contact_text'>Phonebook</h1>\r\n                <Form onSubmit={this.submitForm} />\r\n                <h2 className='contact_text'>Contacts</h2>\r\n                <Filter />\r\n                <Render />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoadingContacts: selectors.getIsLoadingContacts(state),\r\n    error: selectors.getError(state), \r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts:()=>dispatch(operations.fetchContact())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Contacts);"],"sourceRoot":""}